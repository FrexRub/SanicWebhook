"""add users and scopes

Revision ID: 6f183404c79a
Revises: 83b47dc5bf7f
Create Date: 2025-06-20 12:33:28.760565

"""

from typing import Sequence, Union
import random

from alembic import op
from sqlalchemy import orm
import bcrypt

from src.users.models import User
from src.payments.models import Score, Payment


# revision identifiers, used by Alembic.
revision: str = "6f183404c79a"
down_revision: Union[str, Sequence[str], None] = "83b47dc5bf7f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def create_hash_password(password: str) -> bytes:
    salt = bcrypt.gensalt()
    pwd_bytes: bytes = password.encode()
    return bcrypt.hashpw(pwd_bytes, salt)


def generate_bank_account(prefix: str = "40817", length: int = 20) -> str:
    unique_part_length = length - len(prefix)
    unique_part = "".join(
        [str(random.randint(0, 9)) for _ in range(unique_part_length)]
    )
    account_number = prefix + unique_part

    return account_number


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    password_for_user1: str = create_hash_password("1qaz!QAZ").decode()
    user1: User = User(
        full_name="Sergey Petrov",
        email="admin@corp.com",
        hashed_password=password_for_user1,
        is_superuser=True,
    )
    session.add(user1)

    password_for_user2: str = create_hash_password("2wsx@WSX").decode()
    user2: User = User(
        full_name="Elene Ivanova",
        email="elene@corp.com",
        hashed_password=password_for_user2,
    )
    session.add(user2)

    account_number = generate_bank_account()
    score_user2: Score = Score(account_number=account_number, account_id=1, user=user2)
    session.add(score_user2)

    session.commit()


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
